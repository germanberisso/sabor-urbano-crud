extends ../layout

block content
  - var page = 'tareas'
  
  .row.mb-4
    .col-12
      h1.display-6
        i.fas.fa-edit.text-warning.me-3
        //- Mostramos el _id de MongoDB
        | Editar Tarea #{tarea ? tarea.titulo : ''} (ID: #{tarea ? tarea._id : 'N/A'})

  .row
    .col-lg-6
      .card
        .card-body
          if tarea
            //- Añadimos data attribute para el ID
            form#tareaForm(data-tarea-id=tarea._id, method="POST") 
              .mb-3
                label.form-label(for="titulo") Título
                input.form-control(type="text", id="titulo", name="titulo", value=tarea.titulo, required)
              .mb-3
                label.form-label(for="descripcion") Descripción
                textarea.form-control(id="descripcion", name="descripcion", rows="4")= tarea.descripcion || ''
              .mb-3
                label.form-label(for="area") Área
                select.form-control(id="area", name="area", required)
                  option(value="gestion_pedidos", selected=tarea.area === 'gestion_pedidos') Gestión Pedidos
                  option(value="control_inventario", selected=tarea.area === 'control_inventario') Control Inventario
              .mb-3
                label.form-label(for="estado") Estado
                select.form-control(id="estado", name="estado", required)
                  option(value="pendiente", selected=tarea.estado === 'pendiente') Pendiente
                  option(value="en_proceso", selected=tarea.estado === 'en_proceso') En Proceso
                  option(value="finalizada", selected=tarea.estado === 'finalizada') Finalizada
              .mb-3
                label.form-label(for="prioridad") Prioridad
                select.form-control(id="prioridad", name="prioridad", required)
                  option(value="alta", selected=tarea.prioridad === 'alta') Alta
                  option(value="media", selected=tarea.prioridad === 'media') Media
                  option(value="baja", selected=tarea.prioridad === 'baja') Baja
              .mb-3
                label.form-label(for="empleadoAsignado") Empleado Asignado
                select.form-control(id="empleadoAsignado", name="empleadoAsignado")
                  option(value="") Sin asignar
                  each emp in empleados
                    //- SOLUCIÓN: Verificación segura y comparación de strings para Pug
                    - var isSelected = tarea.empleadoAsignado && emp._id && String(tarea.empleadoAsignado._id) === String(emp._id)
                    option(value=emp._id, selected=isSelected) #{emp.nombre} #{emp.apellido}
              .mb-3
                label.form-label(for="observaciones") Observaciones
                textarea.form-control(id="observaciones", name="observaciones", rows="4")= tarea.observaciones || ''
              .d-grid
                button.btn.btn-warning(type="submit")
                  i.fas.fa-save.me-2
                  | Actualizar Tarea
          else
            .alert.alert-danger
              i.fas.fa-exclamation-triangle.me-2
              | Tarea no encontrada
      a.btn.btn-outline-secondary.mt-3(href="/tareas")
        i.fas.fa-arrow-left.me-2
        | Volver
    script.
      const form = document.getElementById('tareaForm');
      // Obtenemos el ID desde el data attribute
      const tareaId = form.dataset.tareaId; 
      
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!tareaId) {
          alert('Error: No se pudo encontrar el ID de la tarea para actualizar.');
          return;
        }

        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        
        // Limpiamos datos opcionales vacíos
        if (!data.empleadoAsignado) data.empleadoAsignado = null;         
        if (!data.descripcion) data.descripcion = ''; // Enviar string vacío si no hay descripción
        if (!data.observaciones) data.observaciones = ''; // Enviar string vacío si no hay observaciones

        try {
          const response = await fetch(`/api/tareas/${tareaId}`, { 
            method: 'PUT', 
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data) 
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            alert('Tarea actualizada exitosamente');
            window.location.href = '/tareas';
          } else {
            console.error('Error del backend:', result); 
            alert(`Error al actualizar: ${result.message || 'Respuesta no exitosa del servidor'}`);
          }
        } catch (error) {
          console.error('Error en fetch:', error);
          alert('Error de conexión al actualizar la tarea.');
        }
      });