extends ../layout

block content
  - var page = 'insumos'
  
  .row.mb-4
    .col-12
      h1.display-6
        i.fas.fa-plus.text-success.me-3
        | Nuevo Insumo

  .row
    .col-lg-6
      .card
        .card-body
          form#insumoForm(action="/api/insumos", method="POST")
            .mb-3
              label.form-label(for="nombre") Nombre
              input.form-control#nombre(
                type="text", 
                name="nombre", 
                list="insumosSuggestions",
                autocomplete="off",
                placeholder="Escribe para buscar insumos existentes...",
                required
              )
              datalist#insumosSuggestions
              small.form-text.text-muted Comienza a escribir para ver sugerencias
              
            .mb-3
              label.form-label(for="categoria") Categoría
              select.form-control(id="categoria", name="categoria", required)
                option(value="") Seleccione una categoría
                option(value="alimentos") Alimentos
                option(value="bebidas") Bebidas
                option(value="limpieza") Limpieza
                option(value="utensilios") Utensilios
                option(value="otros") Otros
                
            .mb-3
              label.form-label(for="stock") Stock
              input.form-control(type="number", id="stock", name="stock", required)
              
            .mb-3
              label.form-label(for="stockMinimo") Stock Mínimo
              input.form-control(type="number", id="stockMinimo", name="stockMinimo", required)
              
            .mb-3
              label.form-label(for="unidadMedida") Unidad de Medida
              select.form-control#unidadMedida(name="unidadMedida")
                option(value="", disabled, selected) Seleccione una unidad
                option(value="kg") Kilogramos (kg)
                option(value="g") Gramos (g)
                option(value="litros") Litros (L)
                option(value="ml") Mililitros (ml)
                option(value="unidades") Unidades
                
            .mb-3
              label.form-label(for="precioUnitario") Precio Unitario ($)
              input.form-control(
                type="number", 
                id="precioUnitario", 
                name="precioUnitario", 
                min="0",
                step="0.01",
                placeholder="Precio por unidad",
                value="0"
              )
              small.form-text.text-muted Precio de compra por unidad de medida
              
            .mb-3
              label.form-label(for="proveedor") Proveedor
              input.form-control#proveedor(
                type="text", 
                name="proveedor", 
                list="proveedoresSuggestions",
                autocomplete="off",
                placeholder="Escribe para buscar proveedores..."
              )
              datalist#proveedoresSuggestions
              small.form-text.text-muted Comienza a escribir para ver proveedores registrados
              
            .d-grid
              button.btn.btn-success(type="submit")
                i.fas.fa-save.me-2
                | Crear Insumo
                
      a.btn.btn-outline-secondary.mt-3(href="/insumos")
        i.fas.fa-arrow-left.me-2
        | Volver
        
  script.
    (function() {
      const nombreInput = document.getElementById('nombre');
      const proveedorInput = document.getElementById('proveedor');
      const insumosList = document.getElementById('insumosSuggestions');
      const proveedoresList = document.getElementById('proveedoresSuggestions');
      const form = document.getElementById('insumoForm');

      // Función para buscar insumos
      async function buscarInsumos(query) {
        if (query.length < 1) {
          insumosList.innerHTML = '';
          return;
        }
        
        try {
          const response = await fetch(`/api/insumos/buscar?q=${encodeURIComponent(query)}`);
          const data = await response.json();
          
          insumosList.innerHTML = '';
          
          data.forEach(insumo => {
            const option = document.createElement('option');
            option.value = insumo.nombre;
            insumosList.appendChild(option);
          });
        } catch (error) {
          console.error('Error al buscar insumos:', error);
        }
      }

      // Función para buscar proveedores
      async function buscarProveedores(query) {
        if (query.length < 1) {
          proveedoresList.innerHTML = '';
          return;
        }
        
        try {
          const response = await fetch(`/api/insumos/proveedores?q=${encodeURIComponent(query)}`);
          const data = await response.json();
          
          proveedoresList.innerHTML = '';
          
          data.forEach(proveedor => {
            const option = document.createElement('option');
            option.value = proveedor;
            proveedoresList.appendChild(option);
          });
        } catch (error) {
          console.error('Error al buscar proveedores:', error);
        }
      }

      // Debounce para nombre de insumo
      let timeoutNombre;
      nombreInput.addEventListener('input', (e) => {
        clearTimeout(timeoutNombre);
        timeoutNombre = setTimeout(() => {
          buscarInsumos(e.target.value);
        }, 300);
      });

      // Debounce para proveedor
      let timeoutProveedor;
      proveedorInput.addEventListener('input', (e) => {
        clearTimeout(timeoutProveedor);
        timeoutProveedor = setTimeout(() => {
          buscarProveedores(e.target.value);
        }, 300);
      });

      // Manejar submit del formulario
      if (form) {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(e.target);
          const data = Object.fromEntries(formData);

          data.stock = Number(data.stock);
          data.stockMinimo = Number(data.stockMinimo);

          if (Number.isNaN(data.stock) || Number.isNaN(data.stockMinimo)) {
            alert('Stock y stock mínimo deben ser números válidos.');
            return;
          }

          if (!data.unidadMedida) delete data.unidadMedida;
          if (!data.proveedor) delete data.proveedor;

          try {
            const response = await fetch('/api/insumos', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data)
            });
            const result = await response.json();
            if (result.success) {
              alert('Insumo creado exitosamente');
              window.location.href = '/insumos';
            } else {
              alert(`Error: ${result.message}`);
            }
          } catch (error) {
            alert('Error al crear el insumo');
          }
        });
      }
    })();
