extends ../layout

block content
  - var page = 'empleados'
  
  .row.mb-4
    .col-12
      h1.display-6
        i.fas.fa-edit.text-warning.me-3
        | Editar Empleado

  .row
    .col-lg-6
      .card
        .card-body
          if empleado
            form#empleadoForm
              input(type="hidden", name="_method", value="PUT")
              .mb-3
                label.form-label(for="nombre") Nombre
                input.form-control(type="text", id="nombre", name="nombre", value=empleado.nombre, required)
              .mb-3
                label.form-label(for="apellido") Apellido
                input.form-control(type="text", id="apellido", name="apellido", value=empleado.apellido, required)
              .mb-3
                label.form-label(for="email") Email
                input.form-control(type="email", id="email", name="email", value=empleado.email, required)
              .mb-3
                label.form-label(for="telefono") Teléfono
                input.form-control(type="text", id="telefono", name="telefono", value=empleado.telefono || '')
              .mb-3
                label.form-label(for="rol") Rol
                select.form-control(id="rol", name="rol", required)
                  option(value="") Seleccione un rol
                  option(value="administrador", selected=empleado.rol==='administrador') Administrador
                  option(value="cocinero", selected=empleado.rol==='cocinero') Cocinero
                  option(value="repartidor", selected=empleado.rol==='repartidor') Repartidor
                  option(value="mozo", selected=empleado.rol==='mozo') Mozo
                  option(value="encargado_stock", selected=empleado.rol==='encargado_stock') Encargado Stock
              .mb-3
                label.form-label(for="area") Área
                select.form-control(id="area", name="area", required)
                  option(value="") Seleccione un área
                  option(value="cocina", selected=empleado.area==='cocina') Cocina
                  option(value="reparto", selected=empleado.area==='reparto') Reparto
                  option(value="salon", selected=empleado.area==='salon') Salón
                  option(value="inventario", selected=empleado.area==='inventario') Inventario
                  option(value="administracion", selected=empleado.area==='administracion') Administración
              .mb-3
                label.form-label(for="sueldo") Sueldo
                input.form-control(
                  type="number",
                  id="sueldo",
                  name="sueldo",
                  value=(empleado.sueldo !== undefined ? empleado.sueldo : 0)
                )
              .mb-3
                label.form-label(for="fechaIngreso") Fecha de Ingreso
                input.form-control(
                  type="date",
                  id="fechaIngreso",
                  name="fechaIngreso",
                  value=(empleado.fechaIngreso instanceof Date ? empleado.fechaIngreso.toISOString().split('T')[0] : ''),
                  required
                )
              .d-grid
                button.btn.btn-warning(type="submit")
                  i.fas.fa-save.me-2
                  | Actualizar Empleado
          else
            .alert.alert-danger
              i.fas.fa-exclamation-triangle.me-2
              | Empleado no encontrado

      a.btn.btn-outline-secondary.mt-3(href="/empleados")
        i.fas.fa-arrow-left.me-2
        | Volver

      // Script para enviar formulario con fetch
      script.
        const form = document.getElementById('empleadoForm');
        if (form) {
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            let data = {};
            for (let [key, value] of formData.entries()) {
              if (value !== '') data[key] = value;
            }
            const id = "#{empleado.id}";
            const method = data._method || 'POST';
            delete data._method;
            if (!data.rol || !data.area) { alert('Debe seleccionar un rol y un área'); return; }
            if (data.fechaIngreso) data.fechaIngreso = new Date(data.fechaIngreso);
            if (data.sueldo !== undefined && data.sueldo !== '') data.sueldo = Number(data.sueldo);
            try {
              const response = await fetch(`/api/empleados/${id}`, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              if (result.success) {
                alert('Empleado actualizado exitosamente');
                window.location.href = '/empleados';
              } else {
                alert(`Error: ${result.message || 'Error desconocido'}`);
              }
            } catch (error) {
              console.error('Error al actualizar empleado:', error);
              alert(error.message);
            }
          });
        }