extends ../layout

block content
  - var page = 'productos' // Marcar en nav si quieres
 
  .row.mb-4
    .col-12
      h1.display-6
        i.fas.fa-edit.text-warning.me-3
        | Editar Producto

  .row
    .col-lg-6
      .card
        .card-body
          if producto
            form#productoForm(data-producto-id=producto._id)
              .mb-3
                label.form-label(for="nombre") Nombre
                input.form-control(type="text", id="nombre", name="nombre", value=producto.nombre, required)
              .mb-3
                label.form-label(for="precio") Precio
                input.form-control(type="number", id="precio", name="precio", value=producto.precio, required, step="any")
              
              .mb-3 
                label.form-label(for="stock") Stock
                select.form-control(name="stock", id="stock")
                  option(value="true", selected=producto.stock === true) Disponible
                  option(value="false", selected=producto.stock === false) No disponible

              .d-grid.mt-3 
                button.btn.btn-warning(type="submit")
                  i.fas.fa-save.me-2
                  | Actualizar Producto
          else
            .alert.alert-danger
              i.fas.fa-exclamation-triangle.me-2
              | Producto no encontrado
          a.btn.btn-outline-secondary.mt-3(href="/productos")
            i.fas.fa-arrow-left.me-2
            | Volver
            
  // Script (sin cambios respecto a la versión anterior corregida)
  script.
    const form = document.getElementById('productoForm');
    const productoId = form ? form.dataset.productoId : null; 

    if (form && productoId) { 
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        
        data.stock = data.stock === 'true'; 
        data.precio = parseFloat(data.precio); 

        if (isNaN(data.precio)) {
          alert('El precio debe ser un número válido.');
          return;
        }

        console.log(`Enviando PUT a /api/productos/${productoId}`, data); 

        try {
          const response = await fetch(`/api/productos/${productoId}`, { 
            method: 'PUT', 
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data) 
          });
          const result = await response.json();

          console.log(`Respuesta de PUT /api/productos/${productoId}`, result); 

          if (response.ok && result.success) { 
            alert('Producto actualizado exitosamente');
            window.location.href = '/productos';
          } else {
            console.error('Error del backend al actualizar:', result);
            alert(`Error al actualizar: ${result.message || `Error ${response.status}`}`);
          }
        } catch (error) {
          console.error('Error en fetch PUT:', error);
          alert('Error de conexión al actualizar el producto.');
        }
      });
    } else {
        console.error("Error: No se encontró el formulario o el ID del producto para el script.");
        const submitButton = form ? form.querySelector('button[type="submit"]') : null;
        if (submitButton) submitButton.disabled = true;
        alert("Error crítico: No se puede actualizar el producto. Recargue la página.");
    }